name: Create Release PR
on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install bump2version
        run: pip install bump2version

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version
        run: |
          bump2version ${{ github.event.inputs.version_type }} --verbose
          echo "VERSION=$(python -c "import sys; sys.path.insert(0, '.'); import __init__; print(__init__.__version__)")" >> $GITHUB_ENV

      - name: Push version bump to main
        run: |
          git push origin main
          git push origin --tags

      - name: Get commit hash for version bump
        run: |
          echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Generate changelog for PR
        id: changelog
        run: |
          # Get commits since last tag (excluding the version bump commit we just made)
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s" HEAD~1)
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s" ${LAST_TAG}..HEAD~1)
          fi

          # Save changelog to file for multiline output
          echo "## Changes in this release" > changelog.md
          echo "" >> changelog.md
          if [ -z "$COMMITS" ]; then
            echo "- Initial release" >> changelog.md
          else
            echo "$COMMITS" >> changelog.md
          fi
          echo "" >> changelog.md
          echo "## Version Details" >> changelog.md
          echo "- **Previous version**: ${LAST_TAG:-"None (initial release)"}" >> changelog.md
          echo "- **New version**: v${{ env.VERSION }}" >> changelog.md
          echo "- **Release type**: ${{ github.event.inputs.version_type }}" >> changelog.md

      - name: Create Release Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: release
          head: main
          title: "Release v${{ env.VERSION }}"
          commit-message: "Merging release v${{ env.VERSION }}"
          body-path: changelog.md
          labels: |
            release
            ${{ github.event.inputs.version_type }}
          assignees: ${{ github.actor }}
          reviewers: ${{ github.actor }}
          draft: false
          delete-branch: false

      - name: Create PR body template
        run: |
          cat > pr_template.md << 'EOF'
          ## Release v${{ env.VERSION }}

          This pull request contains all changes for the **v${{ env.VERSION }}** release.

          ### Release Checklist
          - [x] Version bumped in all files (`__init__.py`, `pyproject.toml`, `tauri_conf.json`)
          - [ ] All tests passing
          - [ ] Documentation updated (if needed)
          - [ ] Breaking changes documented (if any)
          - [ ] Ready for production deployment

          $(cat changelog.md)

          ### Files Changed
          - `__init__.py` - Version updated
          - `pyproject.toml` - Version updated
          - `tauri_conf.json` - Version updated

          ### Post-Merge Actions
          After merging this PR:
          1. Tag `v${{ env.VERSION }}` will be created
          2. Tauri build will trigger automatically and create draft release with distributables
          3. Draft release will be published automatically after build completes

          ### Important Notes
          - This is a **${{ github.event.inputs.version_type }}** release
          - Review all changes carefully before merging
          - Ensure all CI checks pass before merging

          ---

          **Release prepared by**: @${{ github.actor }}
          **Release type**: ${{ github.event.inputs.version_type }}
          **Target branch**: `release`
          **Source commit**: ${{ env.COMMIT_SHA }}
          EOF

      - name: Output PR information
        run: |
          echo "Release PR created successfully!"
          echo "Version: v${{ env.VERSION }}"
          echo "Release type: ${{ github.event.inputs.version_type }}"
          echo "Check the Pull Requests tab to review and merge the release"
